{"version":3,"sources":["components/Questions.js","components/QuestionDetails.js","components/CreateQuestion.js","components/UpdateQuestion.js","routes/Route.js","App.js","serviceWorker.js","index.js"],"names":["Questions","props","fetchQuestionsList","console","log","state","currentPage","fetch","then","response","json","res","data","questions","slice","offset","perPage","setState","pageCount","question_count","catch","err","handleDelete","id","method","alert","handlePageClick","e","selectedPage","selected","page","bind","this","className","to","type","map","question","key","name","role_name","mapping_name","onClick","align","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","React","Component","QuestionDetails","match","params","CreateQuestion","handleInputChange","event","target","value","loadRoleList","roles","loadMappingList","mappings","createQuestionRequest","body","JSON","stringify","headers","role_id","mapping_id","handleMappingChange","handleRoleChange","onChange","htmlFor","role","mapping","UpdateQuestion","fetchQuestion","Number","updateQuestionRequest","exact","path","component","App","Route","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qTAIqBA,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,mBAAqB,WACnBC,QAAQC,IAAI,EAAKC,MAAMC,aACvBC,MAAM,0BAA0B,EAAKF,MAAMC,aAC1CE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAMC,EAAOD,EAAIE,UAEjBV,QAAQC,IAAIQ,GACZT,QAAQC,IAAIQ,EAAKE,MAAM,EAAKT,MAAMU,OAAQ,EAAKV,MAAMU,OAAS,EAAKV,MAAMW,UAEzE,EAAKC,SAAS,CAAEJ,UAAWF,EAAIE,UACfK,UAAWP,EAAIQ,oBAGlCC,OAAM,SAAAC,GACH,EAAKJ,SAAS,CAAEJ,UAAW,mBAhCd,EAoCnBS,aAAe,SAACC,GACdhB,MAAM,qBAAD,OAAsBgB,GAAM,CAAEC,OAAQ,WAC1ChB,MAAK,SAACC,GACHgB,MAAM,iCACN,EAAKvB,yBAxCQ,EA4CnBwB,gBAAkB,SAACC,GACjB,IAAMC,EAAeD,EAAEE,SACjBd,EAASa,EAAe,EAAKvB,MAAMW,QAEzC,EAAKC,SAAS,CACVX,YAAasB,EACbb,OAAQA,IACT,WACC,EAAKb,yBAlDT,EAAKG,MAAQ,CACXQ,UAAW,GACXK,UAAW,EACXH,OAAQ,EACRH,KAAM,GACNI,QAAS,EACTV,YAAa,EACbwB,KAAM,GAER,EAAKJ,gBAAkB,EAAKA,gBAAgBK,KAArB,gBAXN,E,gEAejBC,KAAK9B,uB,+BA0CG,IAAD,OACCW,EAAcmB,KAAK3B,MAAnBQ,UACR,OACE,yBAAKoB,UAAU,qBACb,yBAAKA,UAAY,OACf,yBAAKA,UAAY,YACf,0CAEF,yBAAKA,UAAY,YACf,kBAAC,IAAD,CAAMC,GAAG,kBACP,4BAAQC,KAAK,SAASF,UAAU,0BAAhC,mBAMN,2BAAOA,UAAU,uBACf,+BACE,4BACE,wCACA,oCACA,uCACA,oCACA,oCACA,wCAGJ,2BAAOV,GAAG,cAERV,EAAUuB,KAAI,SAACC,EAAUC,GACvB,OACE,wBAAIA,IAAKD,EAASd,IAChB,4BACE,kBAAC,IAAD,CAAMW,GAAE,qBAAgBG,EAASd,KAC9Bc,EAASE,OAGd,4BAAKF,EAASG,WACd,4BAAKH,EAASI,cACd,4BACE,kBAAC,IAAD,CAAMP,GAAE,qBAAgBG,EAASd,IAAMU,UAAU,gBAAjD,SAIF,4BACE,kBAAC,IAAD,CAAMC,GAAE,qBAAgBG,EAASd,GAAzB,SAAoCU,UAAU,mBAAtD,SAIF,4BACE,4BAAQA,UAAU,iBAAiBS,QAAS,kBAAM,EAAKpB,aAAae,EAASd,MAA7E,iBAUZ,yBAAKoB,MAAM,UACX,kBAAC,IAAD,CACYC,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChB7B,UAAWc,KAAK3B,MAAMa,UACtB8B,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAclB,KAAKN,gBACnByB,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB,iB,GAnIEC,IAAMC,WCFxBC,E,kDACnB,WAAYvD,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CAAEgC,SAAU,IAFR,E,gEAKE,IAAD,OACSd,EAAWS,KAAK/B,MAAnCwD,MAASC,OAAUnC,GAC3BhB,MAAM,qBAAD,OAAsBgB,IACxBf,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC6B,GAAD,OAAc,EAAKpB,SAAS,CAAEoB,kB,+BAG9B,IACAA,EAAaL,KAAK3B,MAAlBgC,SACR,OACE,6BACE,6BACE,6CACA,+BAAKA,EAASE,KAAd,MAGF,6BACE,yCACA,+BAAKF,EAASG,UAAd,MAGF,6BACE,0CACA,+BAAKH,EAASI,aAAd,MAEF,6BACE,kBAAC,IAAD,CAAMP,GAAE,IAAOD,UAAU,mBAAzB,c,GAhCmCqB,IAAMC,W,QCC9BI,E,kDACnB,WAAY1D,GAAQ,IAAD,8BACjB,cAAMA,IAaR2D,kBAAoB,SAACC,GACnB,EAAK5C,SAAL,eAAiB4C,EAAMC,OAAOvB,KAAOsB,EAAMC,OAAOC,SAfjC,EA8BnBC,aAAe,WACbzD,MAAM,iCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAI,GACF,EAAKK,SAAS,CAAEgD,MAAOrD,OAE1BQ,OAAM,SAAAC,GACH,EAAKJ,SAAS,CAAEgD,MAAO,mBArCV,EAyCnBC,gBAAkB,WAChB3D,MAAM,oCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAI,GACF,EAAKK,SAAS,CAAEkD,SAAUvD,OAE7BQ,OAAM,SAAAC,GACH,EAAKJ,SAAS,CAAEkD,SAAU,mBAhDb,EAoDnBC,sBAAwB,SAACP,GACvB1D,QAAQC,IAAI,aAAc,EAAKC,OAC/BE,MAAM,oBAAqB,CACzBiB,OAAQ,OACR6C,KAAMC,KAAKC,UAAU,EAAKlE,OAC1BmE,QAAS,CAAE,eAAgB,sBAC1BhE,MAAK,SAACC,GACPgB,MAAM,qCAzDR,EAAKpB,MAAQ,CACXkC,KAAM,GACNkC,QAAS,GACTC,WAAY,GACZT,MAAO,GACPE,SAAU,IAEZ,EAAKQ,oBAAsB,EAAKA,oBAAoB5C,KAAzB,gBAC3B,EAAK6C,iBAAmB,EAAKA,iBAAiB7C,KAAtB,gBAVP,E,gEAiBC8B,GAClB7B,KAAKf,SAAS,CAACyD,WAAYb,EAAMC,OAAOC,U,uCAGzBF,GACf7B,KAAKf,SAAS,CAACwD,QAASZ,EAAMC,OAAOC,U,0CAIrC/B,KAAKgC,eACLhC,KAAKkC,oB,+BAqCG,IAAD,EAC6BlC,KAAK3B,MAAlCkC,EADA,EACAA,KAAMkC,EADN,EACMA,QAASC,EADf,EACeA,WACtB,OACE,6BACE,4CACA,8BAEE,6BACE,6CACA,2BACEvC,KAAK,OACLI,KAAK,OACLwB,MAAOxB,EACPsC,SAAU7C,KAAK4B,qBAInB,yBAAK3B,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAW,cACd,2BAAO6C,QAAQ,qBAAf,QACE,4BAAQ7C,UAAU,eAAeV,GAAG,qBAAqBgB,KAAK,oBAAoBwB,MAAOU,EAASI,SAAU7C,KAAK4C,kBAC9G5C,KAAK3B,MAAM4D,MAAM7B,KAAI,SAAC2C,GAAD,OAAU,4BAAQzC,IAAKyC,EAAKN,QAASV,MAAOgB,EAAKN,SAAUM,EAAKvC,kBAMhG,yBAAKP,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAW,cACd,2BAAO6C,QAAQ,wBAAf,WACE,4BAAQ7C,UAAU,eAAeV,GAAG,wBAAwBgB,KAAK,uBAAuBwB,MAAOW,EAAYG,SAAU7C,KAAK2C,qBACvH3C,KAAK3B,MAAM8D,SAAS/B,KAAI,SAAC4C,GAAD,OAAa,4BAAQ1C,IAAK0C,EAAQN,WAAYX,MAAOiB,EAAQN,YAAaM,EAAQvC,qBAOrH,yBAAKR,UAAU,OACb,yBAAKA,UAAU,YACb,4BAAQA,UAAU,kBAAkBS,QAASV,KAAKoC,uBAAlD,mBACA,kBAAC,IAAD,CAAMlC,GAAE,IAAOD,UAAU,mBAAzB,gB,GA5G8BqB,IAAMC,W,QCD7B0B,E,kDACnB,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IAuBR2D,kBAAoB,SAACC,GACnB,EAAK5C,SAAL,eAAiB4C,EAAMC,OAAOvB,KAAOsB,EAAMC,OAAOC,SAzBjC,EAoCnBC,aAAe,WACbzD,MAAM,iCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAI,GACF,EAAKK,SAAS,CAAEgD,MAAOrD,OAE1BQ,OAAM,SAAAC,GACH,EAAKJ,SAAS,CAAEgD,MAAO,mBA3CV,EA+CnBC,gBAAkB,WAChB3D,MAAM,oCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAI,GACF,EAAKK,SAAS,CAAEkD,SAAUvD,OAE7BQ,OAAM,SAAAC,GACH,EAAKJ,SAAS,CAAEkD,SAAU,mBAtDb,EA0DnBe,cAAgB,WACd3E,MAAM,qBAAqB+D,KAAKC,UAAUY,OAAO,EAAKlF,MAAMwD,MAAMC,OAAOnC,MACxEf,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAI,GACJT,QAAQC,IAAIQ,GACV,EAAKK,SAAS,CAAEoB,SAAUzB,OAE7BQ,OAAM,SAAAC,GACH,EAAKJ,SAAS,CAAEoB,SAAU,mBAlEb,EAsEnB+C,sBAAwB,SAACvB,GACvBtD,MAAM,qBAAD,OAAsB+D,KAAKC,UAAUY,OAAO,EAAKlF,MAAMwD,MAAMC,OAAOnC,MACrE,CACFC,OAAQ,MACR6C,KAAMC,KAAKC,UAAU,EAAKlE,OAC1BmE,QAAS,CAAE,eAAgB,sBAC1BhE,MAAK,SAACC,GACPgB,MAAM,qCA3ER,EAAKpB,MAAQ,CACXkC,KAAM,GACNkC,QAAS,GACTC,WAAW,GACXT,MAAO,GACPE,SAAU,IAEZ,EAAKS,iBAAmB,EAAKA,iBAAiB7C,KAAtB,gBACxB,EAAK4C,oBAAsB,EAAKA,oBAAoB5C,KAAzB,gBAVV,E,gEAaE,IAAD,OACSR,EAAWS,KAAK/B,MAAnCwD,MAASC,OAAUnC,GAC3BhB,MAAM,qBAAD,OAAsBgB,IACxBf,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC6B,GACL,OAAO,EAAKpB,SAAL,eAAmBoB,OAE5BL,KAAKgC,eACLhC,KAAKkC,oB,0CAOWL,GAClB7B,KAAKf,SAAS,CAACyD,WAAYb,EAAMC,OAAOC,U,uCAGzBF,GACf7B,KAAKf,SAAS,CAACwD,QAASZ,EAAMC,OAAOC,U,+BAiD7B,IAAD,EAC6B/B,KAAK3B,MAAlCkC,EADA,EACAA,KAAMkC,EADN,EACMA,QAASC,EADf,EACeA,WACtB,OACE,6BACE,6CACA,8BACE,6BACE,6CACA,2BACEvC,KAAK,OACLI,KAAK,OACLwB,MAAOxB,EACPsC,SAAU7C,KAAK4B,qBAInB,yBAAK3B,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAW,cACd,2BAAO6C,QAAQ,qBAAf,QACA,4BAAQ7C,UAAU,eAAeV,GAAG,qBAAqBgB,KAAK,oBAAoBwB,MAAOU,EAASI,SAAU7C,KAAK4C,kBAC9G5C,KAAK3B,MAAM4D,MAAM7B,KAAI,SAAC2C,GAAD,OAAU,4BAAQzC,IAAKyC,EAAKN,QAASV,MAAOgB,EAAKN,SAAUM,EAAKvC,kBAM9F,yBAAKP,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAW,cACd,2BAAO6C,QAAQ,wBAAf,WACE,4BAAQ7C,UAAU,eAAeV,GAAG,wBAAwBgB,KAAK,uBAAuBwB,MAAOW,EAAYG,SAAU7C,KAAK2C,qBACvH3C,KAAK3B,MAAM8D,SAAS/B,KAAI,SAAC4C,GAAD,OAAa,4BAAQ1C,IAAK0C,EAAQN,WAAYX,MAAOiB,EAAQN,YAAaM,EAAQvC,qBAMrH,yBAAKR,UAAU,OACb,yBAAKA,UAAU,YACb,4BAAQA,UAAU,kBAAkBS,QAASV,KAAKoD,uBAAlD,mBACA,kBAAC,IAAD,CAAMlD,GAAE,IAAOD,UAAU,mBAAzB,gB,GA5H8BqB,IAAMC,WCOnC,aACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CACEA,KAAK,iBACLD,OAAK,EACLE,UAAW/B,IAEb,kBAAC,IAAD,CACE8B,KAAK,iBACLD,OAAK,EACLE,UAAW5B,IAEb,kBAAC,IAAD,CACE2B,KAAK,sBACLD,OAAK,EACLE,UAAWN,MCdJO,MATf,WACE,OACE,yBAAKvD,UAAU,OACd,kBAACwD,EAAD,QCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpC,MACvB,2D,MCXNqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7F,MAAK,SAAA8F,GACJA,EAAaC,gBAEdnF,OAAM,SAAAoF,GACLrG,QAAQqG,MAAMA,EAAMC,c","file":"static/js/main.6d8125a6.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap';\nimport { Link } from \"react-router-dom\";\nimport ReactPaginate from 'react-paginate';\nexport default class Questions extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      questions: [], \n      pageCount: 1,\n      offset: 0,\n      data: [],\n      perPage: 5,\n      currentPage: 0,\n      page: 0\n    };\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsList();\n  }\n  fetchQuestionsList = () => {\n    console.log(this.state.currentPage);\n    fetch('/api/v1/questions?page='+this.state.currentPage)\n    .then(response => response.json())\n    .then(res => {\n        const data = res.questions;\n\n        console.log(data);\n        console.log(data.slice(this.state.offset, this.state.offset + this.state.perPage));\n\n        this.setState({ questions: res.questions,\n                        pageCount: res.question_count\n        })\n    })\n    .catch(err => {\n        this.setState({ questions: 'API Failed' })\n    })\n  };\n\n  handleDelete = (id) => {\n    fetch(`/api/v1/questions/${id}`, { method: 'delete' })\n    .then((response) => {\n        alert('Question deleted successfully')\n        this.fetchQuestionsList();\n      });\n  }\n\n  handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    const offset = selectedPage * this.state.perPage;\n\n    this.setState({\n        currentPage: selectedPage,\n        offset: offset\n    }, () => {\n        this.fetchQuestionsList()\n    });\n  };\n\n\n  render() {\n    const { questions } = this.state;\n    return (\n      <div className='button__container'>\n        <div className = \"row\">\n          <div className = \"col-md-9\">\n            <h3>Questions</h3>\n          </div>\n          <div className = \"col-md-3\">\n            <Link to=\"/questions/new\">\n              <button type=\"button\" className='btn btn-primary button'>\n                Add Question\n              </button>\n            </Link>\n          </div>\n        </div>\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th>Question</th>\n              <th>Role</th>\n              <th>Mapping</th>\n              <th>Show</th>\n              <th>Edit</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <tbody id=\"table-data\">\n          {\n            questions.map((question, key) => {\n              return (\n                <tr key={question.id}>\n                  <td>\n                    <Link to={`/questions/${question.id}`}>\n                      {question.name}\n                    </Link>\n                  </td>\n                  <td>{question.role_name}</td>\n                  <td>{question.mapping_name}</td>\n                  <td>\n                    <Link to={`/questions/${question.id}`} className=\"btn btn-info\">\n                      Show\n                    </Link>\n                  </td>\n                  <td>\n                    <Link to={`/questions/${question.id}/edit`} className=\"btn btn-success\">\n                      Edit\n                    </Link>\n                  </td>\n                  <td>\n                    <button className=\"btn btn-danger\" onClick={() => this.handleDelete(question.id) }>\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n        <div align='center'>\n        <ReactPaginate\n                    previousLabel={\"prev\"}\n                    nextLabel={\"next\"}\n                    breakLabel={\"...\"}\n                    breakClassName={\"break-me\"}\n                    pageCount={this.state.pageCount}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    onPageChange={this.handlePageClick}\n                    containerClassName={\"pagination\"}\n                    subContainerClassName={\"pages pagination\"}\n                    activeClassName={\"active\"}/>\n\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\nexport default class QuestionDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { question: {} };\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    fetch(`/api/v1/questions/${id}`)\n      .then((response) => response.json())\n      .then((question) => this.setState({ question }));\n  }\n\n  render() {\n    const { question } = this.state;\n    return (\n      <div>\n        <div>\n          <label> Question </label>\n          <p> {question.name} </p>\n        </div>\n\n        <div>\n          <label> Role </label>\n          <p> {question.role_name} </p>\n        </div>\n\n        <div>\n          <label>Mapping</label>\n          <p> {question.mapping_name} </p>\n        </div>\n        <div>\n          <Link to={`/`} className=\"btn btn-default\">\n            Back\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default class CreateQuestion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      role_id: '',\n      mapping_id: '',\n      roles: [],\n      mappings: []\n    }\n    this.handleMappingChange = this.handleMappingChange.bind(this);\n    this.handleRoleChange = this.handleRoleChange.bind(this);\n\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n  handleMappingChange(event) {\n    this.setState({mapping_id: event.target.value});\n  }\n\n  handleRoleChange(event) {\n    this.setState({role_id: event.target.value});\n  }\n\n  componentDidMount() {\n    this.loadRoleList();\n    this.loadMappingList();\n  }\n\n  loadRoleList = () => {\n    fetch('/api/v1/questions/fetch_roles')\n    .then(response => response.json())\n    .then(data => {\n        this.setState({ roles: data })\n    })\n    .catch(err => {\n        this.setState({ roles: 'API Failed' })\n    })\n  };\n\n  loadMappingList = () => {\n    fetch('/api/v1/questions/fetch_mappings')\n    .then(response => response.json())\n    .then(data => {\n        this.setState({ mappings: data })\n    })\n    .catch(err => {\n        this.setState({ mappings: 'API Failed' })\n    })\n  };\n\n  createQuestionRequest = (event) => {\n    console.log('this.state', this.state);\n    fetch('/api/v1/questions', {\n      method: 'post',\n      body: JSON.stringify(this.state),\n      headers: { 'Content-Type': 'application/json' },\n    }).then((response) => {\n      alert('Question created successfully');\n      // location.href = '/';\n    });\n  }\n\n  render() {\n    const {name, role_id, mapping_id} = this.state;\n    return (\n      <div>\n        <h3>New Question</h3>\n        <form>\n\n          <div>\n            <label>Question: </label>\n            <input\n              type='text'\n              name='name'\n              value={name}\n              onChange={this.handleInputChange}\n              />\n          </div>\n\n          <div className='row'>\n            <div className='col-sm-4'>\n              <div className= 'form-group'>\n                <label htmlFor=\"questions_role_id\">Role</label>\n                  <select className=\"form-control\" id=\"questions[role_id]\" name=\"question[role_id]\" value={role_id} onChange={this.handleRoleChange}>\n                    {this.state.roles.map((role) => <option key={role.role_id} value={role.role_id}>{role.role_name}</option>)}\n                  </select>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-sm-4'>\n              <div className= 'form-group'>\n                <label htmlFor=\"questions_mapping_id\">Mapping</label>\n                  <select className=\"form-control\" id=\"questions[mapping_id]\" name=\"question[mapping_id]\" value={mapping_id} onChange={this.handleMappingChange}>\n                    {this.state.mappings.map((mapping) => <option key={mapping.mapping_id} value={mapping.mapping_id}>{mapping.mapping_name}</option>)}\n                  </select>\n              </div>\n            </div>\n          </div>\n\n\n          <div className='row'>\n            <div className='col-sm-4'>\n              <button className=\"btn btn-primary\" onClick={this.createQuestionRequest}>Create Question</button>\n              <Link to={`/`} className=\"btn btn-default\">\n                Back\n              </Link>\n            </div>\n          </div>\n\n        </form>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\nexport default class UpdateQuestion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      role_id: '',\n      mapping_id:'',\n      roles: [],\n      mappings: []\n    }\n    this.handleRoleChange = this.handleRoleChange.bind(this);\n    this.handleMappingChange = this.handleMappingChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    fetch(`/api/v1/questions/${id}`)\n      .then((response) => response.json())\n      .then((question) => {\n        return this.setState({ ...question });\n      })\n      this.loadRoleList();\n      this.loadMappingList();\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleMappingChange(event) {\n    this.setState({mapping_id: event.target.value});\n  }\n\n  handleRoleChange(event) {\n    this.setState({role_id: event.target.value});\n  }\n\n  loadRoleList = () => {\n    fetch('/api/v1/questions/fetch_roles')\n    .then(response => response.json())\n    .then(data => {\n        this.setState({ roles: data })\n    })\n    .catch(err => {\n        this.setState({ roles: 'API Failed' })\n    })\n  };\n\n  loadMappingList = () => {\n    fetch('/api/v1/questions/fetch_mappings')\n    .then(response => response.json())\n    .then(data => {\n        this.setState({ mappings: data })\n    })\n    .catch(err => {\n        this.setState({ mappings: 'API Failed' })\n    })\n  };\n\n  fetchQuestion = () => {\n    fetch('/api/v1/questions/'+JSON.stringify(Number(this.props.match.params.id)))\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n        this.setState({ question: data })\n    })\n    .catch(err => {\n        this.setState({ question: 'API Failed' })\n    })\n  };\n\n  updateQuestionRequest = (event) => {\n    fetch(`/api/v1/questions/${JSON.stringify(Number(this.props.match.params.id))\n    }`, {\n      method: 'put',\n      body: JSON.stringify(this.state),\n      headers: { 'Content-Type': 'application/json' },\n    }).then((response) => {\n      alert('Question updated successfully');\n      // location.href = '/';\n    });\n  }\n\n  render() {\n    const {name, role_id, mapping_id} = this.state;\n    return (\n      <div>\n        <h3>Edit Question</h3>\n        <form>\n          <div>\n            <label>Question: </label>\n            <input\n              type='text'\n              name='name'\n              value={name}\n              onChange={this.handleInputChange}\n              />\n          </div>\n\n          <div className='row'>\n            <div className='col-sm-4'>\n              <div className= 'form-group'>\n                <label htmlFor=\"questions_role_id\">Role</label>\n                <select className=\"form-control\" id=\"questions[role_id]\" name=\"question[role_id]\" value={role_id} onChange={this.handleRoleChange}>\n                  {this.state.roles.map((role) => <option key={role.role_id} value={role.role_id}>{role.role_name}</option>)}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-sm-4'>\n              <div className= 'form-group'>\n                <label htmlFor=\"questions_mapping_id\">Mapping</label>\n                  <select className=\"form-control\" id=\"questions[mapping_id]\" name=\"question[mapping_id]\" value={mapping_id} onChange={this.handleMappingChange}>\n                    {this.state.mappings.map((mapping) => <option key={mapping.mapping_id} value={mapping.mapping_id}>{mapping.mapping_name}</option>)}\n                  </select>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-sm-4'>\n              <button className=\"btn btn-primary\" onClick={this.updateQuestionRequest}>Update Question</button>\n              <Link to={`/`} className=\"btn btn-default\">\n                Back\n              </Link>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}","import React from 'react';\n// import { Switch,Route,} from \"react-router-dom\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Questions from '../components/Questions';\nimport QuestionDetails from '../components/QuestionDetails';\nimport CreateQuestion from '../components/CreateQuestion';\nimport UpdateQuestion from '../components/UpdateQuestion';\n\nexport default () => {\n  return (\n    <Router>\n      <Route exact path=\"/\">\n        <Questions />\n      </Route>\n      <Route\n        path=\"/questions/:id\"\n        exact\n        component={QuestionDetails}\n       />\n      <Route\n        path=\"/questions/new\"\n        exact\n        component={CreateQuestion}\n      />\n      <Route\n        path=\"/questions/:id/edit\"\n        exact\n        component={UpdateQuestion}\n      />\n    </Router>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Route from './routes/Route';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \t<Route />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}